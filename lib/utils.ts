import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatCareerpostCount(count: number): string {
  if (count === 0) {
    return "No Careerposts";
  } else {
    const careerpostCount = count.toString().padStart(2, "0");
    const careerpostWord = count === 1 ? "Careerpost" : "Careerposts";
    return `${careerpostCount} ${careerpostWord}`;
  }
}

// download a pdf whose url is provided
export async function downloadPDF({ fileUrl,fileName }: { fileUrl: string, fileName: string }) {
  const res = await fetch(fileUrl);
  const blob = await res.blob();
  const file = new File([blob], `${fileName}.pdf`, { type: "application/pdf" });
  const url = URL.createObjectURL(file);
  const link = document.createElement("a");
  link.href = url;
  link.download = `${fileName}.pdf`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}






